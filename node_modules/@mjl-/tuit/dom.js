class Listener {
    constructor(event, handler) {
        this.event = event;
        this.handler = handler;
    }
}
export class Style {
    constructor(props) {
        this.props = props;
    }
}
export const isRooter = (v) => {
    return 'root' in v && v.root instanceof HTMLElement;
};
export function isClassNamer(v) {
    return 'className' in v && typeof v['className'] === 'string';
}
export const fill = (e, l) => {
    let haveClass = false;
    l.forEach((c) => {
        if (typeof c === 'string') {
            const n = document.createTextNode(c);
            e.appendChild(n);
        }
        else if (c instanceof Element) {
            e.appendChild(c);
        }
        else if (isClassNamer(c)) {
            if (haveClass) {
                throw new Error('duplicate className');
            }
            e.className = c.className;
            haveClass = true;
        }
        else if (c instanceof Listener) {
            e.addEventListener(c.event, c.handler);
        }
        else if (c instanceof Style) {
            const st = e.style; // xxx
            for (const key in c.props) {
                st[key] = c.props[key]; // xxx probably not always correct, eg for array values
            }
        }
        else if (isRooter(c)) {
            e.appendChild(c.root);
        }
        else if (typeof c === 'object' && c !== null && c.constructor === Object) {
            for (const key in c) {
                e.setAttribute(key, c[key]);
            }
        }
    });
    return e;
};
export const a = (...l) => fill(document.createElement('a'), l);
export const nav = (...l) => fill(document.createElement('nav'), l);
export const label = (...l) => fill(document.createElement('label'), l);
export const small = (...l) => fill(document.createElement('small'), l);
export const h1 = (...l) => fill(document.createElement('h1'), l);
export const h2 = (...l) => fill(document.createElement('h2'), l);
export const h3 = (...l) => fill(document.createElement('h3'), l);
export const h4 = (...l) => fill(document.createElement('h4'), l);
export const h5 = (...l) => fill(document.createElement('h5'), l);
export const h6 = (...l) => fill(document.createElement('h6'), l);
export const div = (...l) => fill(document.createElement('div'), l);
export const span = (...l) => fill(document.createElement('span'), l);
export const button = (...l) => fill(document.createElement('button'), l);
export const table = (...l) => fill(document.createElement('table'), l);
export const thead = (...l) => fill(document.createElement('thead'), l);
export const tbody = (...l) => fill(document.createElement('tbody'), l);
export const tr = (...l) => fill(document.createElement('tr'), l);
export const th = (...l) => fill(document.createElement('th'), l);
export const td = (...l) => fill(document.createElement('td'), l);
export const input = (...l) => fill(document.createElement('input'), l);
export const form = (...l) => fill(document.createElement('form'), l);
export const fieldset = (...l) => fill(document.createElement('fieldset'), l);
export const strong = (...l) => fill(document.createElement('strong'), l);
export const img = (...l) => fill(document.createElement('img'), l);
export const p = (...l) => fill(document.createElement('p'), l);
export const br = (...l) => fill(document.createElement('br'), l);
export const style = (...l) => fill(document.createElement('style'), l);
export const textarea = (...l) => fill(document.createElement('textarea'), l);
export const select = (...l) => fill(document.createElement('select'), l);
export const option = (...l) => fill(document.createElement('option'), l);
export const ul = (...l) => fill(document.createElement('ul'), l);
export const ol = (...l) => fill(document.createElement('ol'), l);
export const li = (...l) => fill(document.createElement('li'), l);
export const dl = (...l) => fill(document.createElement('dl'), l);
export const dt = (...l) => fill(document.createElement('dt'), l);
export const dd = (...l) => fill(document.createElement('dd'), l);
export const address = (...l) => fill(document.createElement('address'), l);
export const article = (...l) => fill(document.createElement('article'), l);
export const aside = (...l) => fill(document.createElement('aside'), l);
export const footer = (...l) => fill(document.createElement('footer'), l);
export const header = (...l) => fill(document.createElement('header'), l);
export const hgroup = (...l) => fill(document.createElement('hgroup'), l);
export const main = (...l) => fill(document.createElement('main'), l);
export const section = (...l) => fill(document.createElement('section'), l);
export const blockquote = (...l) => fill(document.createElement('blockquote'), l);
export const figcaption = (...l) => fill(document.createElement('figcaption'), l);
export const figure = (...l) => fill(document.createElement('figure'), l);
export const hr = (...l) => fill(document.createElement('hr'), l);
export const abbr = (...l) => fill(document.createElement('abbr'), l);
export const bdi = (...l) => fill(document.createElement('bdi'), l);
export const bdo = (...l) => fill(document.createElement('bdo'), l);
export const cite = (...l) => fill(document.createElement('cite'), l);
export const code = (...l) => fill(document.createElement('code'), l);
export const data = (...l) => fill(document.createElement('data'), l);
export const dfn = (...l) => fill(document.createElement('dfn'), l);
export const em = (...l) => fill(document.createElement('em'), l);
export const i = (...l) => fill(document.createElement('i'), l);
export const kbd = (...l) => fill(document.createElement('kbd'), l);
export const mark = (...l) => fill(document.createElement('mark'), l);
export const q = (...l) => fill(document.createElement('q'), l);
export const sub = (...l) => fill(document.createElement('sub'), l);
export const sup = (...l) => fill(document.createElement('sup'), l);
export const time = (...l) => fill(document.createElement('time'), l);
export const tt = (...l) => fill(document.createElement('tt'), l);
export const u = (...l) => fill(document.createElement('u'), l);
export const audio = (...l) => fill(document.createElement('audio'), l);
export const video = (...l) => fill(document.createElement('video'), l);
export const track = (...l) => fill(document.createElement('track'), l);
export const embed = (...l) => fill(document.createElement('embed'), l);
export const iframe = (...l) => fill(document.createElement('iframe'), l);
export const object = (...l) => fill(document.createElement('object'), l);
export const param = (...l) => fill(document.createElement('param'), l);
export const picture = (...l) => fill(document.createElement('picture'), l);
export const source = (...l) => fill(document.createElement('source'), l);
export const canvas = (...l) => fill(document.createElement('canvas'), l);
export const del = (...l) => fill(document.createElement('del'), l);
export const ins = (...l) => fill(document.createElement('ins'), l);
export const caption = (...l) => fill(document.createElement('caption'), l);
export const col = (...l) => fill(document.createElement('col'), l);
export const colgroup = (...l) => fill(document.createElement('colgroup'), l);
export const datalist = (...l) => fill(document.createElement('datalist'), l);
export const legend = (...l) => fill(document.createElement('legend'), l);
export const meter = (...l) => fill(document.createElement('meter'), l);
export const optgroup = (...l) => fill(document.createElement('optgroup'), l);
export const output = (...l) => fill(document.createElement('output'), l);
export const progress = (...l) => fill(document.createElement('progress'), l);
export const dialog = (...l) => fill(document.createElement('dialog'), l);
export const menu = (...l) => fill(document.createElement('menu'), l);
export const menuitem = (...l) => fill(document.createElement('menuitem'), l);
export const summary = (...l) => fill(document.createElement('summary'), l);
export const createElement = (name, ...l) => fill(document.createElement(name), l);
export function listen(event, handler) {
    return new Listener(event, handler);
}
export const _style = (props) => {
    return new Style(props);
};
export const children = (elem, ...kids) => {
    while (elem.firstChild) {
        elem.removeChild(elem.firstChild);
    }
    let ensureElement = (e) => {
        if (typeof e === 'string') {
            return span(e);
        }
        else if (isRooter(e)) {
            return e.root;
        }
        else {
            return e;
        }
    };
    kids.forEach((kid) => elem.appendChild(ensureElement(kid)));
};
