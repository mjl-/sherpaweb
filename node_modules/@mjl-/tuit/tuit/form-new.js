import * as dom from '../dom';
import * as form from './form';
import * as fns from './fns';
export class FormNew {
    constructor(app, objectName, fields, create) {
        const spinBox = dom.span();
        let fieldset;
        this.fieldValues = [];
        this.root = fns.box(app, { ui: 'FormNew' }, dom.div(app.looks.boxPaddingLast, dom.h1(app.looks.title, 'New ' + objectName), dom.form(dom.listen('submit', ev => {
            ev.preventDefault();
            // xxx see if we can make this more typesafe
            const object = {};
            this.fieldValues.forEach((fv, index) => object[fields[index].name] = fv.value());
            app.save(spinBox, fieldset, 'adding ' + objectName, () => create(object));
        }), fieldset = dom.fieldset(dom.div(...fields.map(f => {
            const fv = form.makeFieldValue(app, f);
            this.fieldValues.push(fv);
            return fv.element;
        })), dom.button(app.looks.btnSuccess, { type: 'submit' }, 'Create ' + objectName), spinBox))));
    }
    focus() {
        for (const fv of this.fieldValues) {
            if (fv.focusable) {
                fv.focusable.focus();
                return;
            }
        }
    }
    loadState(state) {
        return Promise.resolve();
    }
    currentState() {
        return [];
    }
}
