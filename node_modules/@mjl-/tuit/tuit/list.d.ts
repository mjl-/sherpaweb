import * as dom from '../dom';
import * as types from './types';
import * as looks from './looks';
export declare const rowMarkSelected: (looks: looks.Looks, ui: HTMLElement, primary: HTMLElement, secondary: HTMLElement) => void;
export declare const rowMarkUnselected: (looks: looks.Looks, ui: HTMLElement, primary: HTMLElement, secondary: HTMLElement) => void;
export interface ItemOpener<ItemView> {
    openItem: (key: string) => Promise<ItemView>;
}
export interface ItemRower<Item> extends dom.Rooter {
    key: string;
    item: Item;
    render: () => void;
    markSelected: () => void;
    markUnselected: () => void;
    matches: (text: string) => boolean;
    compare: (o: ItemRower<Item>) => number;
}
export interface Selecter<Item, ItemRow extends ItemRower<Item>> {
    selectClick: (itemRow: ItemRow) => void;
}
export declare class List<Item, ItemRow extends dom.Rooter & ItemRower<Item>, ItemNew extends types.UI & types.Stater, ItemView extends types.UI & types.Stater> implements types.UI, types.Stater {
    private app;
    private title;
    private rowClass;
    private newClass;
    private viewClass;
    root: HTMLElement;
    selected?: ItemRow;
    rowsAll: ItemRow[];
    rowsFiltered: ItemRow[];
    listBox: HTMLElement;
    search: HTMLInputElement;
    list: HTMLElement;
    detailBox: HTMLElement;
    noSelection: HTMLElement;
    viewUI?: ItemView;
    newUI?: ItemNew;
    constructor(app: dom.Rooter & types.Saver & types.Loader & types.Looker & types.StateSaver, title: string, items: Item[], rowClass: {
        new (app: types.Looker, item: Item, listUI: Selecter<Item, ItemRow>): ItemRow;
    }, newClass: () => ItemNew, viewClass: (itemRow: ItemRow) => ItemView);
    loadNew(state: types.State): Promise<void>;
    loadState(state: types.State): Promise<void>;
    currentState(): types.State;
    focus(): void;
    searchValue(): string;
    openItem(itemKey: string): Promise<ItemView>;
    selectClick(ir: ItemRow): void;
    loadItem(state: types.State, ir: ItemRow): Promise<void>;
    select(ir: ItemRow): void;
    deselect(loadDetail: boolean): Promise<void>;
    filter(): void;
    addItem(item: Item): void;
    removeItem(ir: ItemRow): void;
    updateItem(ir: ItemRow, item: Item): void;
}
