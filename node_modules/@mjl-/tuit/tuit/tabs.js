var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as dom from '../dom';
import * as fns from './fns';
import * as load from './load';
const tabsBoxStyle = {
    borderBottom: '1px solid #ccc',
    textAlign: 'center',
};
export class Tabs {
    constructor(app, tabs) {
        this.app = app;
        this.tabs = tabs;
        const looksTabsBox = app.ensureLooks('tabs-box', tabsBoxStyle);
        this.activeIndex = -1;
        this.buttons = tabs.map((tab, index) => dom.button(app.looks.groupBtnLight, dom.listen('click', ev => this.select(index)), tabs[index].label, { tabindex: '0' }));
        this.selectedBox = fns.box(app);
        this.root = fns.box(app, dom.div(looksTabsBox, dom.div(app.looks.boxPadding, ...this.buttons)), this.selectedBox);
    }
    openTab(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = this.tabs.findIndex(tab => tab.name === name);
            if (index < 0) {
                return Promise.reject({ message: 'cannot find tab' });
            }
            yield this.loadTab([], index);
            return this.tabs[index].ui;
        });
    }
    select(index) {
        this.loadTab([], index);
        this.app.saveState();
    }
    loadTab(state, index) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.activeIndex !== index) {
                if (this.activeIndex >= 0) {
                    this.buttons[this.activeIndex].className = this.app.looks.groupBtnLight.className;
                }
                this.activeIndex = index;
                this.buttons[this.activeIndex].className = this.app.looks.groupBtnPrimary.className;
                const activeTab = this.tabs[this.activeIndex];
                yield load.reveal(this.selectedBox, activeTab.ui.root);
            }
            return this.tabs[this.activeIndex].ui.loadState(state);
        });
    }
    focus() {
        this.tabs[this.activeIndex].ui.focus();
    }
    loadState(state) {
        const w = state.shift();
        if (w) {
            const i = this.tabs.findIndex(tab => tab.name === w);
            if (i >= 0) {
                return this.loadTab(state, i);
            }
        }
        return this.loadTab(state, 0);
    }
    currentState() {
        const tab = this.tabs[this.activeIndex];
        return [tab.name, ...tab.ui.currentState()];
    }
}
