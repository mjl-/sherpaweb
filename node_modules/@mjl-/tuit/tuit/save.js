var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as dom from '../dom';
import * as fns from './fns';
import * as load from './load';
export const save = (app, spinBox, disabler, msg, fn, errorHandler) => __awaiter(this, void 0, void 0, function* () {
    dom.children(spinBox, dom.span(app.looks.spin));
    if (disabler) {
        disabler.disabled = true;
    }
    const _finally = () => {
        if (disabler) {
            disabler.disabled = false;
        }
    };
    try {
        yield fn();
    }
    catch (err) {
        yield errorHandler(err);
    }
    load.reveal(spinBox, dom.span(app.looks.checkmarkSuccess));
    _finally();
    fns.delay(1000)
        .then(() => fns.fade(spinBox, -.2))
        .then(() => dom.children(spinBox));
});
