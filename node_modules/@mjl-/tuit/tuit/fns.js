var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as dom from '../dom';
export const delay = (ms) => __awaiter(this, void 0, void 0, function* () {
    yield new Promise(resolve => setTimeout(resolve, ms));
});
// packState returns the state in a form that can be assigned to location.hash directly.
export const packState = (state) => {
    if (state.length === 0) {
        return '';
    }
    const pack = (st) => {
        if (typeof st === 'string') {
            return encodeURIComponent(st);
        }
        return ['[', ...st.map(w => pack(w)), ']'].join(' ');
    };
    return '#' + state.map(w => pack(w)).join(' ');
};
export const parseState = (locationHash) => {
    const words = locationHash ? decodeURIComponent(locationHash).substring(1).split(' ') : [];
    const takeArray = () => {
        const r = [];
        while (words.length > 0 && words[0] !== ']') {
            const w = words[0];
            words.shift();
            if (w === '[') {
                r.push(takeArray());
                words.shift();
            }
            else {
                r.push(w);
            }
        }
        return r;
    };
    const r = takeArray();
    return r;
};
export const fade = (elem, step) => {
    return new Promise(resolve => {
        let opacity = Math.max(0, Math.min(1, parseFloat(elem.style.opacity || '1')));
        let id = window.setInterval(() => {
            opacity += step;
            elem.style.opacity = '' + opacity;
            if (opacity <= 0 || opacity >= 1) {
                window.clearInterval(id);
                resolve();
            }
        }, 16);
    });
};
export const box = (app, ...l) => {
    const e = dom.div({ ui: 'box' }, app.looks.box, ...l);
    e.style.setProperty('height', '100%'); // todo: figure out why this is necessary. same style is in class, but doesn't have the effect this inline style has....
    return e;
};
const middleBoxStyle = {
    display: 'flex',
    height: '100%',
    textAlign: 'center',
};
const middleStyle = {
    flexGrow: 1,
    alignSelf: 'center',
};
export const middle = (app, ...kids) => {
    const looksMiddleBox = app.ensureLooks('middle-box', middleBoxStyle);
    const looksMiddle = app.ensureLooks('middle', middleStyle);
    return dom.div(looksMiddleBox, dom.div(looksMiddle, ...kids));
};
