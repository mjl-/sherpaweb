var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as dom from '../dom';
import * as confirm from './confirm';
import * as form from './form';
import * as fns from './fns';
export class FormEdit {
    constructor(app, objectName, fields, item, save, remove) {
        const saveSpinBox = dom.span();
        let saveFieldset;
        const removeSpinBox = dom.span();
        let removeButton;
        this.fieldValues = [];
        this.root = fns.box(app, { ui: 'FormEdit' }, dom.div(app.looks.boxPaddingLast, dom.div(dom.h1(app.looks.inlineTitle, objectName.substring(0, 1).toUpperCase() + objectName.substring(1)), ' ', removeButton = dom.button(app.looks.btnDanger, dom.listen('click', (ev) => __awaiter(this, void 0, void 0, function* () {
            const confirmed = yield confirm.confirm(app, 'Sure?', 'Are you sure you want to remove this ' + objectName + '?', 'Yes, remove ' + objectName);
            if (confirmed) {
                // xxx see if we can make this more typesafe
                const object = {};
                this.fieldValues.forEach((fv, index) => object[fields[index].name] = fv.value());
                app.save(removeSpinBox, removeButton, 'removing ' + objectName, () => remove(object));
            }
        })), 'remove'), removeSpinBox), dom.form(dom.listen('submit', ev => {
            ev.preventDefault();
            // xxx see if we can make this more typesafe
            const object = {};
            this.fieldValues.forEach((fv, index) => object[fields[index].name] = fv.value());
            app.save(saveSpinBox, saveFieldset, 'saving ' + objectName, () => save(object));
        }), saveFieldset = dom.fieldset(dom.div(...fields.map(f => {
            const v = item[f.name];
            const fv = form.makeFieldValue(app, f, v);
            this.fieldValues.push(fv);
            return fv.element;
        })), dom.button(app.looks.btnPrimary, { type: 'submit' }, 'Save ' + objectName), saveSpinBox))));
    }
    focus() {
        for (const fv of this.fieldValues) {
            if (fv.focusable) {
                fv.focusable.focus();
                return;
            }
        }
    }
    loadState(state) {
        return Promise.resolve();
    }
    currentState() {
        return [];
    }
}
