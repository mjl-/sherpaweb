import * as dom from '../dom';
import * as looks from './looks';
export interface Focuser {
    focus(): void;
}
export declare type UI = dom.Rooter & Focuser;
export declare type StateWord = (string | StateArray);
export declare type State = StateWord[];
export interface StateArray extends Array<StateWord> {
}
export interface Stater {
    loadState: (state: State) => Promise<void>;
    currentState: () => State;
}
export interface StateSaver {
    saveState: () => void;
}
export interface Saver {
    save: (spinBox: HTMLElement, disabler: {
        disabled: boolean;
    } | null, msg: string, fn: () => Promise<void>) => void;
}
export interface Loader {
    load: (elem: HTMLElement, fn: () => [Aborter, Promise<HTMLElement[]>], loaded?: () => void) => void;
}
export interface Looker {
    looks: looks.Looks;
    ensureLooks: (className: string, ...styles: (looks.Style | dom.CSSProperties)[]) => looks.Style;
    copyLooks: (className: string, ...styles: (looks.Style | dom.CSSProperties)[]) => looks.Style;
}
export interface Aborter {
    abort?: () => void;
}
