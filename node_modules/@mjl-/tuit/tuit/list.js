var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as dom from '../dom';
import * as split from './split';
import * as fns from './fns';
import * as load from './load';
export const rowMarkSelected = (looks, ui, primary, secondary) => {
    ui.className = looks.listItemSelected.className;
    primary.className = looks.listItemSelectedPrimary.className;
    secondary.className = looks.listItemSelectedSecondary.className;
};
export const rowMarkUnselected = (looks, ui, primary, secondary) => {
    ui.className = looks.listItem.className;
    primary.className = looks.listItemPrimary.className;
    secondary.className = looks.listItemSecondary.className;
};
const styles = {
    listBox: { borderTop: '.25em solid #fff' },
    list: {
        borderBottom: '.25em solid #ddd',
        maxWidth: '13em',
    },
};
export class List {
    constructor(app, title, items, rowClass, newClass, viewClass) {
        this.app = app;
        this.title = title;
        this.rowClass = rowClass;
        this.newClass = newClass;
        this.viewClass = viewClass;
        const looksListBox = app.ensureLooks('list-box', styles.listBox);
        this.search = dom.input(app.looks.searchInput, { placeholder: 'search...' }, dom.listen('keyup', ev => {
            const v = this.searchValue();
            this.filter();
            if (v) {
                if (this.rowsFiltered.length > 0) {
                    this.search.className = app.looks.searchInputFiltered.className;
                }
                else {
                    this.search.className = app.looks.searchInputNoresults.className;
                }
            }
            else {
                this.search.className = app.looks.searchInput.className;
            }
        }));
        this.rowsAll = items.map(e => {
            return new rowClass(app, e, this);
        });
        this.rowsFiltered = this.rowsAll.map(e => e);
        this.rowsFiltered.sort((a, b) => a.compare(b));
        this.listBox = fns.box(app, dom.div(looksListBox, { tabindex: '0' }, dom.listen('keydown', ev => {
            if (this.rowsFiltered.length === 0) {
                return;
            }
            const selectOffset = (offset) => {
                ev.preventDefault();
                const index = Math.min(this.rowsFiltered.length - 1, Math.max(0, this.rowsFiltered.findIndex(ir => ir === this.selected) + offset));
                if (index >= 0 && index < this.rowsFiltered.length) {
                    this.select(this.rowsFiltered[index]);
                }
            };
            switch (ev.key) {
                case 'ArrowUp':
                    if (this.selected) {
                        selectOffset(-1);
                    }
                    else {
                        this.select(this.rowsFiltered[this.rowsFiltered.length - 1]);
                    }
                    break;
                case 'ArrowDown':
                    if (this.selected) {
                        selectOffset(1);
                    }
                    else {
                        this.select(this.rowsFiltered[0]);
                    }
                    break;
                case 'Enter':
                    const e = this.rowsFiltered.find(ur => ur.root === document.activeElement);
                    if (e) {
                        this.selectClick(e);
                    }
                    break;
                default:
                    return;
            }
            ev.preventDefault();
        }), ...this.rowsFiltered));
        this.list = fns.box(app, dom._style(styles.list), dom.div(app.looks.boxPadding, dom.div(dom.h1(app.looks.inlineTitle, title), ' ', dom.button(app.looks.btnSuccess, dom.listen('click', ev => {
            this.deselect(false);
            this.loadNew([]);
            app.saveState();
        }), 'new')), this.search), this.listBox);
        this.noSelection = fns.middle(app, dom.div('Choose from the list'));
        this.detailBox = fns.box(app);
        const splitUI = new split.Split(app, this.list, this.detailBox);
        this.root = fns.box(app, { ui: 'ItemList' }, splitUI);
    }
    loadNew(state) {
        return __awaiter(this, void 0, void 0, function* () {
            const newUI = this.newClass();
            this.newUI = newUI;
            yield newUI.loadState(state);
            load.reveal(this.detailBox, newUI.root);
            newUI.focus();
        });
    }
    loadState(state) {
        return __awaiter(this, void 0, void 0, function* () {
            let w = state.shift();
            if (w === 'New') {
                return this.loadNew(state);
            }
            else if (typeof w === 'string' && w.startsWith('-')) {
                w = w.substring(1);
                const row = this.rowsFiltered.find(row => row.key === w);
                if (row) {
                    return this.loadItem(state, row);
                }
            }
            dom.children(this.detailBox, this.noSelection);
            return Promise.resolve();
        });
    }
    currentState() {
        if (this.newUI) {
            return ['New', ...this.newUI.currentState()];
        }
        else if (this.selected && this.viewUI) {
            return ['-' + this.selected.key, ...this.viewUI.currentState()];
        }
        else {
            return [];
        }
    }
    focus() {
        if (this.newUI) {
            this.newUI.focus();
        }
        else if (this.viewUI) {
            this.viewUI.focus();
        }
        else {
            this.search.focus();
        }
    }
    searchValue() {
        return this.search.value.toLowerCase().trim();
    }
    openItem(itemKey) {
        const ir = this.rowsAll.find(ir => ir.key === itemKey);
        if (!ir) {
            return Promise.reject({ message: 'cannot find key "' + itemKey + '" in ' + this.title.toLowerCase() });
        }
        if (!this.rowsFiltered.find(row => row === ir)) {
            this.rowsFiltered.push(ir);
        }
        this.loadItem([], ir);
        this.filter(); // for sorting
        const viewUI = this.viewUI;
        return new Promise(resolve => {
            resolve(viewUI);
        });
    }
    selectClick(ir) {
        if (this.selected === ir) {
            this.deselect(true);
        }
        else {
            this.select(ir);
        }
    }
    loadItem(state, ir) {
        return __awaiter(this, void 0, void 0, function* () {
            if (ir !== this.selected) {
                this.newUI = undefined;
                if (this.selected) {
                    this.selected.markUnselected();
                }
                this.selected = ir;
                this.selected.markSelected();
                this.viewUI = this.viewClass(ir);
                load.reveal(this.detailBox, this.viewUI.root);
            }
            yield this.viewUI.loadState(state);
        });
    }
    select(ir) {
        this.loadItem([], ir);
        this.app.saveState();
    }
    deselect(loadDetail) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.selected) {
                this.selected.markUnselected();
            }
            this.selected = undefined;
            this.viewUI = undefined;
            if (loadDetail) {
                load.reveal(this.detailBox, this.noSelection);
                this.search.focus();
            }
            this.app.saveState();
        });
    }
    filter() {
        const filter = (ir, text) => {
            return ir.matches(text);
        };
        const v = this.searchValue();
        this.rowsFiltered = this.rowsAll.filter(ir => filter(ir, v) || ir == this.selected);
        this.rowsFiltered.sort((a, b) => a.compare(b));
        dom.children(this.listBox, ...this.rowsFiltered);
    }
    addItem(item) {
        const ir = new this.rowClass(this.app, item, this);
        this.rowsAll.push(ir);
        this.rowsFiltered.push(ir);
        this.select(ir);
        this.filter();
    }
    removeItem(ir) {
        this.deselect(true);
        this.rowsAll = this.rowsAll.filter(v => v !== ir);
        this.filter();
    }
    updateItem(ir, item) {
        ir.item = item;
        ir.render();
    }
}
